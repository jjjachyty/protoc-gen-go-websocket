package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage       = protogen.GoImportPath("context")
	jsonEncodingPackage  = protogen.GoImportPath("encoding/json")
	melodyPackage        = protogen.GoImportPath("gopkg.in/olahol/melody.v1")
	transportHTTPPackage = protogen.GoImportPath("github.com/go-kratos/kratos/v2/transport/http")
	httpPackage          = protogen.GoImportPath("net/http")
	errorsPackage        = protogen.GoImportPath("errors")
)

// generateFile generates a _websocket.pb.go file containing kratos errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_webscoket.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-websocket. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// protoc-gen-go-websocket 1.0")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the kratos package it is being compiled against.")
	g.P("var _ = new(", contextPackage.Ident("Context"), ")")
	g.P("var _ ", jsonEncodingPackage.Ident("Delim"))
	g.P("var _ ", httpPackage.Ident("ConnState"))
	// g.P("var actionNotFound =  ", errorsPackage.Ident("New(\"action not found\")"))
	g.P("const _ = ", transportHTTPPackage.Ident("SupportPackageIsVersion1"))
	g.P()
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: protogen.GoImportPath("errors")})
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: melodyPackage})
	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// websocket Server.
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}

	for _, method := range service.Methods {
		sd.Methods = append(sd.Methods, &methodDesc{
			Name:     method.GoName,
			Request:  g.QualifiedGoIdent(method.Input.GoIdent),
			Response: g.QualifiedGoIdent(method.Output.GoIdent),
		})
	}
	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

const deprecationComment = "// Deprecated: Do not use."
