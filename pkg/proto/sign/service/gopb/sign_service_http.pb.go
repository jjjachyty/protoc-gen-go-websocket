// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package gopb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SignServiceHTTPServer interface {
	FlowOneStepCreate(context.Context, *FlowOneStepCreateReq) (*FlowOneStepCreateResp, error)
	Notice(context.Context, *NoticeReq) (*NoticeResp, error)
	OrgAccountAdd(context.Context, *OrgAccountAddReq) (*OrgAccountAddResp, error)
	TemplateCreate(context.Context, *CreateByTemplateReq) (*CreateByTemplateResp, error)
	TemplateGet(context.Context, *TemplateGetReq) (*TemplateGetResp, error)
	UserAccountAdd(context.Context, *UserAccountAddReq) (*UserAccountAddResp, error)
	VoucherIssue(context.Context, *VoucherIssueReq) (*VoucherIssueResp, error)
}

func RegisterSignServiceHTTPServer(s *http.Server, srv SignServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/sign/org/add", _SignService_OrgAccountAdd0_HTTP_Handler(srv))
	r.POST("/sign/user/add", _SignService_UserAccountAdd0_HTTP_Handler(srv))
	r.POST("/sign/template/create", _SignService_TemplateCreate0_HTTP_Handler(srv))
	r.GET("/sign/template/get/{TemplateID}", _SignService_TemplateGet0_HTTP_Handler(srv))
	r.POST("/sign/signflows/create", _SignService_FlowOneStepCreate0_HTTP_Handler(srv))
	r.GET("/sign/voucher/issue", _SignService_VoucherIssue0_HTTP_Handler(srv))
	r.POST("/sign/signflows/notice", _SignService_Notice0_HTTP_Handler(srv))
}

func _SignService_OrgAccountAdd0_HTTP_Handler(srv SignServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrgAccountAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pb.SignService/OrgAccountAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrgAccountAdd(ctx, req.(*OrgAccountAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrgAccountAddResp)
		return ctx.Result(200, reply)
	}
}

func _SignService_UserAccountAdd0_HTTP_Handler(srv SignServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAccountAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pb.SignService/UserAccountAdd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserAccountAdd(ctx, req.(*UserAccountAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAccountAddResp)
		return ctx.Result(200, reply)
	}
}

func _SignService_TemplateCreate0_HTTP_Handler(srv SignServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateByTemplateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pb.SignService/TemplateCreate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TemplateCreate(ctx, req.(*CreateByTemplateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateByTemplateResp)
		return ctx.Result(200, reply)
	}
}

func _SignService_TemplateGet0_HTTP_Handler(srv SignServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TemplateGetReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pb.SignService/TemplateGet")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TemplateGet(ctx, req.(*TemplateGetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TemplateGetResp)
		return ctx.Result(200, reply)
	}
}

func _SignService_FlowOneStepCreate0_HTTP_Handler(srv SignServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FlowOneStepCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pb.SignService/FlowOneStepCreate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlowOneStepCreate(ctx, req.(*FlowOneStepCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FlowOneStepCreateResp)
		return ctx.Result(200, reply)
	}
}

func _SignService_VoucherIssue0_HTTP_Handler(srv SignServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VoucherIssueReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pb.SignService/VoucherIssue")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VoucherIssue(ctx, req.(*VoucherIssueReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VoucherIssueResp)
		return ctx.Result(200, reply)
	}
}

func _SignService_Notice0_HTTP_Handler(srv SignServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NoticeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pb.SignService/Notice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Notice(ctx, req.(*NoticeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NoticeResp)
		return ctx.Result(200, reply)
	}
}

type SignServiceHTTPClient interface {
	FlowOneStepCreate(ctx context.Context, req *FlowOneStepCreateReq, opts ...http.CallOption) (rsp *FlowOneStepCreateResp, err error)
	Notice(ctx context.Context, req *NoticeReq, opts ...http.CallOption) (rsp *NoticeResp, err error)
	OrgAccountAdd(ctx context.Context, req *OrgAccountAddReq, opts ...http.CallOption) (rsp *OrgAccountAddResp, err error)
	TemplateCreate(ctx context.Context, req *CreateByTemplateReq, opts ...http.CallOption) (rsp *CreateByTemplateResp, err error)
	TemplateGet(ctx context.Context, req *TemplateGetReq, opts ...http.CallOption) (rsp *TemplateGetResp, err error)
	UserAccountAdd(ctx context.Context, req *UserAccountAddReq, opts ...http.CallOption) (rsp *UserAccountAddResp, err error)
	VoucherIssue(ctx context.Context, req *VoucherIssueReq, opts ...http.CallOption) (rsp *VoucherIssueResp, err error)
}

type SignServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSignServiceHTTPClient(client *http.Client) SignServiceHTTPClient {
	return &SignServiceHTTPClientImpl{client}
}

func (c *SignServiceHTTPClientImpl) FlowOneStepCreate(ctx context.Context, in *FlowOneStepCreateReq, opts ...http.CallOption) (*FlowOneStepCreateResp, error) {
	var out FlowOneStepCreateResp
	pattern := "/sign/signflows/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pb.SignService/FlowOneStepCreate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SignServiceHTTPClientImpl) Notice(ctx context.Context, in *NoticeReq, opts ...http.CallOption) (*NoticeResp, error) {
	var out NoticeResp
	pattern := "/sign/signflows/notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pb.SignService/Notice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SignServiceHTTPClientImpl) OrgAccountAdd(ctx context.Context, in *OrgAccountAddReq, opts ...http.CallOption) (*OrgAccountAddResp, error) {
	var out OrgAccountAddResp
	pattern := "/sign/org/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pb.SignService/OrgAccountAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SignServiceHTTPClientImpl) TemplateCreate(ctx context.Context, in *CreateByTemplateReq, opts ...http.CallOption) (*CreateByTemplateResp, error) {
	var out CreateByTemplateResp
	pattern := "/sign/template/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pb.SignService/TemplateCreate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SignServiceHTTPClientImpl) TemplateGet(ctx context.Context, in *TemplateGetReq, opts ...http.CallOption) (*TemplateGetResp, error) {
	var out TemplateGetResp
	pattern := "/sign/template/get/{TemplateID}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/pb.SignService/TemplateGet"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SignServiceHTTPClientImpl) UserAccountAdd(ctx context.Context, in *UserAccountAddReq, opts ...http.CallOption) (*UserAccountAddResp, error) {
	var out UserAccountAddResp
	pattern := "/sign/user/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pb.SignService/UserAccountAdd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SignServiceHTTPClientImpl) VoucherIssue(ctx context.Context, in *VoucherIssueReq, opts ...http.CallOption) (*VoucherIssueResp, error) {
	var out VoucherIssueResp
	pattern := "/sign/voucher/issue"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/pb.SignService/VoucherIssue"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
